# This workflow will build a .NET project, publish it, and then merge changes
# from the 'master' branch into the 'dev' branch within the same repository.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET CI/CD with Auto-Merge to Dev

on:
  push:
    branches: [ "master" ] # Trigger on pushes to the 'master' branch
  pull_request:
    branches: [ "master" ] # Trigger on pull requests targeting the 'master' branch

jobs:
  build-and-publish-and-merge: # Renamed job to reflect new responsibilities
    runs-on: ubuntu-latest # Specify Ubuntu environment as requested
    permissions:
      contents: write # Grant write permission to the GITHUB_TOKEN for merge operations

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Checkout the repository content
      with:
        fetch-depth: 0 # Fetch all history for merging operations

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4 # Action to set up the .NET SDK
      with:
        dotnet-version: '8.0.x' # Specify .NET 8.0 version as requested

    - name: Restore dependencies
      run: dotnet restore WebApplication1.sln # Restore NuGet packages for the solution

    - name: Build application
      run: dotnet build WebApplication1.sln --no-restore --configuration Release # Build the application in Release configuration

    - name: Run tests
      # Optional: Uncomment and adjust if your project includes test projects and requires a specific test project path
      run: dotnet test --no-build --verbosity normal # Run tests without rebuilding

    - name: Publish application
      # This will create a deployable output in the 'publish/linux-x64' directory.
      # Adjusted runtime to linux-x64 for Ubuntu runner.
      run: dotnet publish WebApplication1.sln --no-build --configuration Release -o publish/linux-x64 --runtime linux-x64 --self-contained true

    - name: Upload Build Artifacts
      # Uploads the published application as a workflow artifact, useful for deployment.
      uses: actions/upload-artifact@v4
      with:
        name: web-application-publish
        path: publish/linux-x64 # Path to your published application

    - name: Merge master into dev
      # This step will only run if all previous steps (build, test, and publish) are successful.
      if: success()
      run: |
        # Configure Git user for commits made by the GitHub Actions bot
        git config user.name "GitHub Actions Bot"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Checkout the 'dev' branch, creating it if it doesn't exist
        git checkout dev || git checkout -b dev
        # Pull the latest changes from the remote 'dev' branch to avoid conflicts
        git pull origin dev
        # Merge 'master' into 'dev' with a descriptive commit message
        git merge master -m "Merge master into dev after successful CI/CD"

        # Optional: Uncomment the following section to add a check for merge conflicts
        # if git diff --check --exit-code; then
        #   echo "No merge conflicts detected. Proceeding with push."
        # else
        #   echo "Merge conflicts detected. Please resolve manually. Aborting push."
        #   exit 1
        # fi

        # Push the merged changes to the 'dev' branch
        git push origin dev
